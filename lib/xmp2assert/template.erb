#! /your/favourite/path/to/ruby
# -*- mode: ruby; <%=
"coding: #{script.__ENCODING__}"
%>; indent-tabs-mode: nil; ruby-indent-level: 2 -*-
%#> # <- :HACK: emacs font-lock
# -*- frozen_string_literal: true -*-
# -*- warn_indent: true -*-

# Copyright (c) 2017 Urabe, Shyouhei
#
# Permission is hereby granted, free of  charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction,  including without limitation the rights
# to use,  copy, modify,  merge, publish,  distribute, sublicense,  and/or sell
# copies  of the  Software,  and to  permit  persons to  whom  the Software  is
# furnished to do so, subject to the following conditions:
#
#         The above copyright notice and this permission notice shall be
#         included in all copies or substantial portions of the Software.
#
# THE SOFTWARE  IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND, EXPRESS OR
# IMPLIED,  INCLUDING BUT  NOT LIMITED  TO THE  WARRANTIES OF  MERCHANTABILITY,
# FITNESS FOR A  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO  EVENT SHALL THE
# AUTHORS  OR COPYRIGHT  HOLDERS  BE LIABLE  FOR ANY  CLAIM,  DAMAGES OR  OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Because we don't want to pollute $", we write everything needed in this file.

saved_binding = TOPLEVEL_BINDING.dup
rx = IO.for_fd ARGV.shift.to_i, 'rb'
tx = IO.for_fd ARGV.shift.to_i, 'wb'

private

define_method :xmp2assert_assert do |xmp, expr, bt = caller(3)|
  bt.reject! {|i| i.start_with? __FILE__ }
  str = Marshal.dump [xmp, expr.inspect, bt]
  tx.puts str.length
  tx.write str
  tx.flush
  if rx.gets then
    return true
  else
    Process.exit false
  end
end

# Here we go.

file = "<%= script.__FILE__ %>" #=
line = <%= script.__LINE__ %> #=
src  = ::DATA.read
% if exception and not exception.empty?
begin
  eval src, saved_binding, file, line
rescue Exception => e
  b = e.backtrace
  b.reject! {|i| i.start_with? __FILE__ }
  e.set_backtrace b
  expected = <%= exception.dump %> #=
  xmp2assert_assert expected, e, e.backtrace
end
% else
eval src, saved_binding, file, line
% end

# Below is a generated software, sourced from <%= script.__FILE__ %>.
# Above copyright notice does not apply any further.  Consult the original.
__END__
<%= script.read.dup.force_encoding('binary') -%>
